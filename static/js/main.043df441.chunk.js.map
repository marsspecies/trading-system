{"version":3,"sources":["utils/initExchange.ts","utils/getChartData.ts","components/charts/Chart.tsx","utils/hooks.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CRO_USDT","fetchHuobiproKlineOfCroUsdt","a","timeframe","huobipro","ccxt","fetchOHLCV","getDateStr","dateTime","date","Date","getFullYear","getMonth","getDate","getPredictData","pastData","pastDates","futureData","futureDates","pastAveragePrice","reverse","forEach","item","index","averagePrice","Number","toFixed","push","lastAveragePrice","futurePrice","reversePastDates","Chart","chart","useRef","callback","options","useState","returnValue","setReturnValue","error","setError","loading","setLoading","useCallback","then","data","catch","err","console","onFailed","finally","result","useAsyncCall","getkline","useEffect","current","option","pastCount","candleData","dateTimes","dates","dateStr","slice","length","getEmptyData","map","calculateMA","dayCount","i","len","sum","j","lengendTime","legend","tooltip","trigger","axisPointer","animation","type","lineStyle","color","width","opacity","xAxis","concat","axisLine","yAxis","scale","splitLine","show","grid","bottom","dataZoom","textStyle","handleIcon","dataBackground","areaStyle","start","series","name","itemStyle","color0","borderColor","borderColor0","smooth","showSymbol","getOptions","setOption","id","style","height","ref","node","echarts","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.043df441.chunk.js","sourcesContent":["import ccxt, { Exchange } from 'ccxt'\n\nconst CRO_USDT = 'CRO/USDT'\n\nexport const init = async () => {\n  // const kraken = new ccxt.kraken()\n  // const bitfinex = new ccxt.bitfinex({ verbose: true })\n  const huobipro = new ccxt.huobipro()\n  // const okcoinusd = new ccxt.okcoinusd({\n  //   apiKey: 'YOUR_PUBLIC_API_KEY',\n  //   secret: 'YOUR_SECRET_PRIVATE_KEY',\n  // })\n\n  const exchangeId = 'binance'\n  const exchangeClass = ccxt[exchangeId]\n  const exchange = new exchangeClass({\n    apiKey: 'YOUR_API_KEY',\n    secret: 'YOUR_SECRET',\n    timeout: 30000,\n    enableRateLimit: true,\n  })\n\n  // console.log(kraken.id, await kraken.loadMarkets())\n  // console.log(bitfinex.id, await bitfinex.loadMarkets())\n  const huobiproId = huobipro.id\n  const huobiTradingPairs = await huobipro.loadMarkets()\n  const CRO_USDT_MARKETS = huobiTradingPairs[CRO_USDT]\n  console.log('market', CRO_USDT_MARKETS)\n  const market = await huobipro.fetchOHLCV(CRO_USDT)\n  console.log('fetch market', market)\n\n  // console.log(kraken.id, await kraken.fetchOrderBook(kraken.symbols[0]))\n  // console.log(bitfinex.id, await bitfinex.fetchTicker('BTC/USD'))\n  console.log(huobipro.id, await huobipro.fetchTrades(CRO_USDT))\n  const CRO_USDT_TICKER = await huobipro.fetchTicker(CRO_USDT)\n  console.log('ticker', CRO_USDT_TICKER)\n\n  // console.log(okcoinusd.id, await okcoinusd.fetchBalance())\n\n  // sell 1 BTC/USD for market price, sell a bitcoin for dollars immediately\n  // console.log(okcoinusd.id, await okcoinusd.createMarketSellOrder('BTC/USD', 1))\n\n  // buy 1 BTC/USD for $2500, you pay $2500 and receive à¸¿1 when the order is closed\n  // console.log(\n  //   okcoinusd.id,\n  //   await okcoinusd.createLimitBuyOrder('BTC/USD', 1, 2500.0)\n  // )\n\n  // pass/redefine custom exchange-specific order params: type, amount, price or whatever\n  // use a custom order type\n  // bitfinex.createLimitSellOrder('BTC/USD', 1, 10, { type: 'trailing-stop' })\n\n  return huobipro\n}\n\nexport const fetchHuobiproKlineOfCroUsdt = async (timeframe: string = '1d') => {\n  const huobipro = new ccxt.huobipro()\n  return await huobipro.fetchOHLCV(CRO_USDT, timeframe)\n}\n","import ccxt, { OHLCV } from 'ccxt'\n\n// DateItem = [open, close, lowest, highest]\ntype DataItem = [number, number, number, number]\n\ntype TimeFrame = '1d' | '1m' | '5m' | '15m' | '30m' | '1w' | '1M' | '1H'\n\nconst getDateStr = (dateTime: number): string => {\n  const date = new Date(dateTime)\n  const dateStr = `${date.getFullYear()}/${\n    date.getMonth() + 1\n  }/${date.getDate()}`\n  return dateStr\n}\n\nconst getPredictData = (\n  pastData: DataItem[],\n  pastDates: number[]\n): { futureData: number[]; futureDates: string[] } => {\n  const futureData: number[] = []\n  const futureDates: string[] = []\n  const pastAveragePrice: number[] = []\n  const reversePastData = [...pastData].reverse()\n  reversePastData.forEach((item, index) => {\n    const averagePrice = Number(((item[3] + item[2]) / 2).toFixed(4))\n    pastAveragePrice.push(averagePrice)\n    if (!index) {\n      futureData.push(averagePrice)\n    } else {\n      const lastAveragePrice = pastAveragePrice[index - 1]\n      const futurePrice = Number(\n        (lastAveragePrice - (averagePrice - lastAveragePrice)).toFixed(4)\n      )\n      futureData.push(futurePrice)\n    }\n  })\n\n  const reversePastDates = [...pastDates].reverse()\n  reversePastDates.forEach((item, index) => {\n    if (index) {\n      futureDates.push(getDateStr(2 * reversePastDates[0] - item))\n    } else {\n      futureDates.push(getDateStr(item))\n    }\n  })\n  return {\n    futureData,\n    futureDates,\n  }\n}\n\nexport const getOptions = (\n  data: OHLCV[],\n  timeframe: TimeFrame = '1d',\n  pastCount: number = 30\n) => {\n  const candleData: DataItem[] = []\n  const dateTimes: number[] = []\n  const dates: string[] = []\n  data.forEach(item => {\n    const dateStr = getDateStr(item[0])\n    dateTimes.push(item[0])\n    dates.push(dateStr)\n    candleData.push([item[1], item[4], item[3], item[2]])\n  })\n\n  const { futureData, futureDates } = getPredictData(\n    candleData.slice(candleData.length - pastCount - 1),\n    dateTimes.slice(candleData.length - pastCount - 1)\n  )\n\n  const getEmptyData = (data: any[]) => {\n    return data.map(() => '-')\n  }\n  function calculateMA(dayCount: number, data: DataItem[]) {\n    let result = []\n    for (let i = 0, len = data.length; i < len; i++) {\n      if (i < dayCount) {\n        result.push('-')\n        continue\n      }\n      let sum = 0\n      for (let j = 0; j < dayCount; j++) {\n        sum += data[i - j][1]\n      }\n      result.push((sum / dayCount).toFixed(4))\n    }\n    return result\n  }\n\n  const lengendTime = `CRO_USDT ${timeframe}`\n\n  let option: echarts.EChartOption = {\n    legend: {\n      data: [lengendTime, 'Future', 'MA5', 'MA10', 'MA20', 'MA30'],\n      // inactiveColor: '#777',\n    },\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        animation: false,\n        type: 'cross',\n        lineStyle: {\n          color: '#376df4',\n          width: 2,\n          opacity: 1,\n        },\n      },\n    },\n    xAxis: {\n      type: 'category',\n      data: dates.concat(futureDates),\n      axisLine: { lineStyle: { color: '#8392A5' } },\n    },\n    yAxis: {\n      scale: true,\n      axisLine: { lineStyle: { color: '#8392A5' } },\n      splitLine: { show: false },\n    },\n    grid: {\n      bottom: 80,\n    },\n    dataZoom: [\n      {\n        textStyle: {\n          color: '#8392A5',\n        },\n        handleIcon:\n          'path://M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\n        dataBackground: {\n          areaStyle: {\n            color: '#8392A5',\n          },\n          lineStyle: {\n            opacity: 0.8,\n            color: '#8392A5',\n          },\n        },\n        // brushSelect: true,\n        start: 80,\n      },\n      {\n        type: 'inside',\n      },\n    ],\n    series: [\n      {\n        type: 'candlestick',\n        name: lengendTime,\n        data: (candleData as any).concat(getEmptyData(futureData)),\n        itemStyle: {\n          color: '#FD1050',\n          color0: '#0CF49B',\n          borderColor: '#FD1050',\n          borderColor0: '#0CF49B',\n        },\n      },\n      {\n        name: 'Future',\n        type: 'line',\n        data: getEmptyData(candleData).concat(futureData as any),\n        smooth: true,\n        showSymbol: false,\n        itemStyle: {\n          color: '#000',\n        },\n        lineStyle: {\n          width: 1,\n          color: '#ccc',\n        },\n      },\n      {\n        name: 'MA5',\n        type: 'line',\n        data: calculateMA(5, candleData).concat(getEmptyData(futureData)),\n        smooth: true,\n        showSymbol: false,\n        lineStyle: {\n          width: 1,\n        },\n      },\n      {\n        name: 'MA10',\n        type: 'line',\n        data: calculateMA(10, candleData).concat(getEmptyData(futureData)),\n        smooth: true,\n        showSymbol: false,\n        lineStyle: {\n          width: 1,\n        },\n      },\n      {\n        name: 'MA20',\n        type: 'line',\n        data: calculateMA(20, candleData).concat(getEmptyData(futureData)),\n        smooth: true,\n        showSymbol: false,\n        lineStyle: {\n          width: 1,\n        },\n      },\n      {\n        name: 'MA30',\n        type: 'line',\n        data: calculateMA(30, candleData).concat(getEmptyData(futureData)),\n        smooth: true,\n        showSymbol: false,\n        lineStyle: {\n          width: 1,\n        },\n      },\n    ],\n  }\n\n  return option\n}\n","import React, { FC, useEffect, useRef, useState } from 'react'\nimport * as echarts from 'echarts'\n\nimport { fetchHuobiproKlineOfCroUsdt } from '../../utils/initExchange'\nimport { useAsyncCall } from '../../utils/hooks'\nimport { getOptions } from '../../utils/getChartData'\nconst Chart: FC = () => {\n  const chart = useRef<echarts.ECharts>()\n  const [getkline, { result }] = useAsyncCall(fetchHuobiproKlineOfCroUsdt)\n\n  useEffect(() => {\n    getkline()\n  }, [getkline])\n\n  useEffect(() => {\n    if (!result || !chart.current) return\n    const option = getOptions(result)\n\n    chart.current.setOption(option)\n  }, [result])\n\n  return (\n    <div\n      id=\"kline\"\n      style={{ width: '100%', height: '100vh' }}\n      ref={node => {\n        if (!node) return\n        chart.current = echarts.init(node)\n      }}\n    ></div>\n  )\n}\n\nexport default Chart\n","import { useState, useCallback } from 'react'\n\nexport function useAsyncCall<T>(\n  callback: (...args: any[]) => Promise<T>,\n  options?: {\n    onFailed?: (...args: any[]) => void\n  }\n): [\n  (...args: any[]) => Promise<T>,\n  {\n    result: T | null\n    loading: boolean\n    error: any\n  }\n] {\n  const [returnValue, setReturnValue] = useState<T | null>(null)\n  const [error, setError] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const callFn = useCallback(\n    (...args) => {\n      setLoading(true)\n      return callback(...args)\n        .then(data => {\n          if (data) {\n            setReturnValue(data)\n          }\n          return data\n        })\n        .catch(err => {\n          console.error(err)\n          setError(err || 'error ocurred in useAsyncCall hook')\n          options?.onFailed?.(err)\n          return err\n        })\n        .finally(() => {\n          setLoading(false)\n        })\n    },\n    [callback, options]\n  )\n  return [callFn, { result: returnValue, error, loading }]\n}\n","import React, { useEffect } from 'react'\n\nimport Chart from './components/charts/Chart'\nimport logo from './logo.svg'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chart></Chart>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}